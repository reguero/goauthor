// Code generated by gowsdl DO NOT EDIT.

package networkservice

import (
	"context"
	"encoding/xml"
	"time"

	"github.com/hooklift/gowsdl/soap"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type DeviceInput struct {
	DeviceName string `xml:"DeviceName,omitempty"`

	Location *Location `xml:"Location,omitempty"`

	Zone string `xml:"Zone,omitempty"`

	Manufacturer string `xml:"Manufacturer,omitempty"`

	Model string `xml:"Model,omitempty"`

	Description string `xml:"Description,omitempty"`

	Tag string `xml:"Tag,omitempty"`

	SerialNumber string `xml:"SerialNumber,omitempty"`

	OperatingSystem *OperatingSystem `xml:"OperatingSystem,omitempty"`

	InventoryNumber string `xml:"InventoryNumber,omitempty"`

	LandbManagerPerson *PersonInput `xml:"LandbManagerPerson,omitempty"`

	ResponsiblePerson *PersonInput `xml:"ResponsiblePerson,omitempty"`

	UserPerson *PersonInput `xml:"UserPerson,omitempty"`

	HCPResponse bool `xml:"HCPResponse,omitempty"`

	IPv6Ready bool `xml:"IPv6Ready,omitempty"`

	ManagerLocked bool `xml:"ManagerLocked,omitempty"`
}

type DeviceInfo struct {
	DeviceName string `xml:"DeviceName,omitempty"`

	Location *Location `xml:"Location,omitempty"`

	Zone string `xml:"Zone,omitempty"`

	Status string `xml:"Status,omitempty"`

	Manufacturer string `xml:"Manufacturer,omitempty"`

	Model string `xml:"Model,omitempty"`

	GenericType string `xml:"GenericType,omitempty"`

	Description string `xml:"Description,omitempty"`

	Tag string `xml:"Tag,omitempty"`

	SerialNumber string `xml:"SerialNumber,omitempty"`

	OperatingSystem *OperatingSystem `xml:"OperatingSystem,omitempty"`

	InventoryNumber string `xml:"InventoryNumber,omitempty"`

	StartDate time.Time `xml:"StartDate,omitempty"`

	EndDate time.Time `xml:"EndDate,omitempty"`

	LandbManagerPerson *Person `xml:"LandbManagerPerson,omitempty"`

	ResponsiblePerson *Person `xml:"ResponsiblePerson,omitempty"`

	UserPerson *Person `xml:"UserPerson,omitempty"`

	NetworkInterfaceCards *ArrayOfInterfaceCards `xml:"NetworkInterfaceCards,omitempty"`

	Interfaces *ArrayOfInterfaces `xml:"Interfaces,omitempty"`

	HCPResponse bool `xml:"HCPResponse,omitempty"`

	Blocked *Blocking `xml:"Blocked,omitempty"`

	LastChangeDate time.Time `xml:"LastChangeDate,omitempty"`

	IPv6Ready bool `xml:"IPv6Ready,omitempty"`

	ManagerLocked bool `xml:"ManagerLocked,omitempty"`
}

type ArrayOfDeviceInfo struct {
}

type DeviceBasicInfo struct {
	DeviceName string `xml:"DeviceName,omitempty"`

	Location *Location `xml:"Location,omitempty"`

	Zone string `xml:"Zone,omitempty"`

	Status string `xml:"Status,omitempty"`

	Manufacturer string `xml:"Manufacturer,omitempty"`

	Model string `xml:"Model,omitempty"`

	GenericType string `xml:"GenericType,omitempty"`

	Description string `xml:"Description,omitempty"`

	Tag string `xml:"Tag,omitempty"`

	SerialNumber string `xml:"SerialNumber,omitempty"`

	OperatingSystem *OperatingSystem `xml:"OperatingSystem,omitempty"`

	InventoryNumber string `xml:"InventoryNumber,omitempty"`

	StartDate time.Time `xml:"StartDate,omitempty"`

	EndDate time.Time `xml:"EndDate,omitempty"`

	LandbManagerPerson *Person `xml:"LandbManagerPerson,omitempty"`

	ResponsiblePerson *Person `xml:"ResponsiblePerson,omitempty"`

	UserPerson *Person `xml:"UserPerson,omitempty"`

	HCPResponse bool `xml:"HCPResponse,omitempty"`

	LastChangeDate time.Time `xml:"LastChangeDate,omitempty"`

	IPv6Ready bool `xml:"IPv6Ready,omitempty"`

	ManagerLocked bool `xml:"ManagerLocked,omitempty"`
}

type Location struct {
	Building string `xml:"Building,omitempty"`

	Floor string `xml:"Floor,omitempty"`

	Room string `xml:"Room,omitempty"`
}

type OperatingSystem struct {
	Name string `xml:"Name,omitempty"`

	Version string `xml:"Version,omitempty"`
}

type InterfaceCard struct {
	HardwareAddress string `xml:"HardwareAddress,omitempty"`

	CardType string `xml:"CardType,omitempty"`
}

type ArrayOfInterfaceCards struct {
}

type InterfaceInformation struct {
	ConnectedToSC bool `xml:"ConnectedToSC,omitempty"`

	Name string `xml:"Name,omitempty"`

	IPAddress string `xml:"IPAddress,omitempty"`

	ServiceName string `xml:"ServiceName,omitempty"`

	SecurityClass string `xml:"SecurityClass,omitempty"`

	InternetConnectivity bool `xml:"InternetConnectivity,omitempty"`

	SubnetMask string `xml:"SubnetMask,omitempty"`

	DefaultGateway string `xml:"DefaultGateway,omitempty"`

	NameServers *ArrayOfString `xml:"NameServers,omitempty"`

	BelongsToSets *ArrayOfString `xml:"BelongsToSets,omitempty"`

	TimeServers *ArrayOfString `xml:"TimeServers,omitempty"`

	IPv6Address string `xml:"IPv6Address,omitempty"`

	IPv6NetMask int32 `xml:"IPv6NetMask,omitempty"`

	IPv6NameServers *ArrayOfString `xml:"IPv6NameServers,omitempty"`

	IPv6TimeServers *ArrayOfString `xml:"IPv6TimeServers,omitempty"`

	IPv6DefaultGateway string `xml:"IPv6DefaultGateway,omitempty"`

	IPAliases *ArrayOfString `xml:"IPAliases,omitempty"`

	BoundInterfaceCard *InterfaceCard `xml:"BoundInterfaceCard,omitempty"`

	Outlet *Outlet `xml:"Outlet,omitempty"`

	RackName string `xml:"RackName,omitempty"`

	Description string `xml:"Description,omitempty"`

	NetworkDomainName string `xml:"NetworkDomainName,omitempty"`

	Medium string `xml:"Medium,omitempty"`

	ReverseTelnet *ReverseTelnet `xml:"ReverseTelnet,omitempty"`
}

type ArrayOfString struct {
}

type ArrayOfInterfaces struct {
}

type Person struct {
	Name string `xml:"Name,omitempty"`

	FirstName string `xml:"FirstName,omitempty"`

	Department string `xml:"Department,omitempty"`

	Group string `xml:"Group,omitempty"`

	Email string `xml:"Email,omitempty"`

	Phone string `xml:"Phone,omitempty"`

	CCID int64 `xml:"CCID,omitempty"`
}

type PersonInput struct {
	Name string `xml:"Name,omitempty"`

	FirstName string `xml:"FirstName,omitempty"`

	Department string `xml:"Department,omitempty"`

	Group string `xml:"Group,omitempty"`

	PersonID int64 `xml:"PersonID,omitempty"`
}

type Outlet struct {
	ID string `xml:"ID,omitempty"`

	FANOUT bool `xml:"FANOUT,omitempty"`
}

type OutletLocation struct {
	Location *Location `xml:"Location,omitempty"`

	Outlet *Outlet `xml:"Outlet,omitempty"`
}

type ReverseTelnet struct {
	Data string `xml:"Data,omitempty"`

	Port string `xml:"Port,omitempty"`

	ServiceName string `xml:"ServiceName,omitempty"`
}

type Time struct {
	TimeUTC time.Time `xml:"TimeUTC,omitempty"`

	Unixtime int64 `xml:"unixtime,omitempty"`
}

type Blocking struct {
	By *Person `xml:"By,omitempty"`

	Date time.Time `xml:"Date,omitempty"`

	Reason string `xml:"Reason,omitempty"`

	UnblockRole string `xml:"UnblockRole,omitempty"`
}

type DeviceSearch struct {
	Name string `xml:"Name,omitempty"`

	Surname string `xml:"Surname,omitempty"`

	FirstName string `xml:"FirstName,omitempty"`

	Location *Location `xml:"Location,omitempty"`

	OutletID string `xml:"OutletID,omitempty"`

	Tag string `xml:"Tag,omitempty"`

	SerialNumber string `xml:"SerialNumber,omitempty"`

	InventoryNumber string `xml:"InventoryNumber,omitempty"`

	HardwareAddress string `xml:"HardwareAddress,omitempty"`

	IPAddress string `xml:"IPAddress,omitempty"`

	RackName string `xml:"RackName,omitempty"`

	PersonID int64 `xml:"PersonID,omitempty"`

	Domain string `xml:"Domain,omitempty"`

	ResponsibleDepGroup string `xml:"ResponsibleDepGroup,omitempty"`

	UserResponsibleDepGroup string `xml:"UserResponsibleDepGroup,omitempty"`

	OperatingSystem string `xml:"OperatingSystem,omitempty"`

	LastChangeDate time.Time `xml:"LastChangeDate,omitempty"`

	LastActiveDate time.Time `xml:"LastActiveDate,omitempty"`
}

type BulkInterface struct {
	InterfaceName string `xml:"InterfaceName,omitempty"`

	IPAliases *ArrayOfString `xml:"IPAliases,omitempty"`

	Location *Location `xml:"Location,omitempty"`

	OutletLabel string `xml:"OutletLabel,omitempty"`

	SecurityClass string `xml:"SecurityClass,omitempty"`

	InternetConnectivity bool `xml:"InternetConnectivity,omitempty"`

	Medium string `xml:"Medium,omitempty"`

	SwitchName string `xml:"SwitchName,omitempty"`

	PortNumber string `xml:"PortNumber,omitempty"`

	CableNumber string `xml:"CableNumber,omitempty"`

	IP string `xml:"IP,omitempty"`

	IPv6 string `xml:"IPv6,omitempty"`

	ServiceName string `xml:"ServiceName,omitempty"`
}

type BulkInterfaceAuto struct {
	InterfaceName string `xml:"InterfaceName,omitempty"`

	IPAliases *ArrayOfString `xml:"IPAliases,omitempty"`

	Location *Location `xml:"Location,omitempty"`

	OutletLabel string `xml:"OutletLabel,omitempty"`

	SecurityClass string `xml:"SecurityClass,omitempty"`

	InternetConnectivity bool `xml:"InternetConnectivity,omitempty"`

	Medium string `xml:"Medium,omitempty"`

	SwitchName string `xml:"SwitchName,omitempty"`

	PortNumber string `xml:"PortNumber,omitempty"`

	CableNumber string `xml:"CableNumber,omitempty"`

	IP string `xml:"IP,omitempty"`

	IPv6 string `xml:"IPv6,omitempty"`

	ServiceName string `xml:"ServiceName,omitempty"`

	BindHardwareAddress string `xml:"BindHardwareAddress,omitempty"`
}

type ArrayOfBulkInterfaces struct {
}

type ArrayOfBulkInterfacesAuto struct {
}

type BulkMoveOptions struct {
	PreserveIP bool `xml:"PreserveIP,omitempty"`
}

type Auth struct {
	Token string `xml:"token,omitempty"`
}

type SetInfo struct {
	ID int64 `xml:"ID,omitempty"`

	Name string `xml:"Name,omitempty"`

	Domain string `xml:"Domain,omitempty"`

	ResponsiblePerson *Person `xml:"ResponsiblePerson,omitempty"`

	Description string `xml:"Description,omitempty"`

	ProjectUrl string `xml:"ProjectUrl,omitempty"`

	Type string `xml:"Type,omitempty"`

	Addresses *ArrayOfString `xml:"Addresses,omitempty"`

	Services *ArrayOfString `xml:"Services,omitempty"`

	Sets *ArrayOfString `xml:"Sets,omitempty"`
}

type ArrayOfSwitchPort struct {
}

type SwitchPort struct {
	Name string `xml:"Name,omitempty"`

	ServiceName string `xml:"ServiceName,omitempty"`

	Medium string `xml:"Medium,omitempty"`

	Type string `xml:"Type,omitempty"`

	Status string `xml:"Status,omitempty"`

	InUse bool `xml:"InUse,omitempty"`

	Devices *ArrayOfString `xml:"Devices,omitempty"`

	Terminals *ArrayOfString `xml:"Terminals,omitempty"`
}

type SwitchPortTypeStatus struct {
	Type string `xml:"Type,omitempty"`

	Status string `xml:"Status,omitempty"`
}

type InetInfo struct {
	HostName string `xml:"HostName,omitempty"`

	HardwareAddress string `xml:"HardwareAddress,omitempty"`

	IP string `xml:"IP,omitempty"`

	NetAddress string `xml:"NetAddress,omitempty"`

	Mask string `xml:"Mask,omitempty"`

	GatewayAddress string `xml:"GatewayAddress,omitempty"`
}

type ArrayOfConnection struct {
}

type ArrayOfObservedSwitchConnection struct {
}

type ArrayOfInetInfo struct {
}

type Connection struct {
	InterfaceName string `xml:"InterfaceName,omitempty"`

	SwitchName string `xml:"SwitchName,omitempty"`

	SwitchPort string `xml:"SwitchPort,omitempty"`
}

type ObservedSwitchConnection struct {
	SwitchName string `xml:"SwitchName,omitempty"`

	SwitchPort string `xml:"SwitchPort,omitempty"`

	HardwareAddress string `xml:"HardwareAddress,omitempty"`
}

type SetInput struct {
	Name string `xml:"Name,omitempty"`

	Domain string `xml:"Domain,omitempty"`

	ResponsiblePerson *PersonInput `xml:"ResponsiblePerson,omitempty"`

	Description string `xml:"Description,omitempty"`

	ProjectUrl string `xml:"ProjectUrl,omitempty"`

	Type string `xml:"Type,omitempty"`
}

type NetNameTuple struct {
	DeviceName string `xml:"DeviceName,omitempty"`

	InterfaceName string `xml:"InterfaceName,omitempty"`

	IP string `xml:"IP,omitempty"`

	IPv6 string `xml:"IPv6,omitempty"`

	Alias string `xml:"Alias,omitempty"`
}

type ArrayOfNetNameTuple struct {
}

type LogicalInterfaceInput struct {
	InterfaceName string `xml:"InterfaceName,omitempty"`

	ServiceName string `xml:"ServiceName,omitempty"`

	SecurityClass string `xml:"SecurityClass,omitempty"`

	IP string `xml:"IP,omitempty"`

	IPv6 string `xml:"IPv6,omitempty"`

	InternetConnectivity bool `xml:"InternetConnectivity,omitempty"`
}

type ServiceInfo struct {
	Name string `xml:"Name,omitempty"`

	Primary string `xml:"Primary,omitempty"`

	AddressIni string `xml:"AddressIni,omitempty"`

	AddressEnd string `xml:"AddressEnd,omitempty"`

	AddressCount int32 `xml:"AddressCount,omitempty"`

	SubnetMask string `xml:"SubnetMask,omitempty"`

	DefaultGateway string `xml:"DefaultGateway,omitempty"`

	NameServers *ArrayOfString `xml:"NameServers,omitempty"`

	TimeServers *ArrayOfString `xml:"TimeServers,omitempty"`

	Mediums *ArrayOfString `xml:"Mediums,omitempty"`

	NetworkDomain string `xml:"NetworkDomain,omitempty"`

	Description string `xml:"Description,omitempty"`

	UserIPTotal int32 `xml:"UserIPTotal,omitempty"`

	UserIPFree int32 `xml:"UserIPFree,omitempty"`

	IPv6Network string `xml:"IPv6Network,omitempty"`

	IPv6NetMask int32 `xml:"IPv6NetMask,omitempty"`

	IPv6DefaultGateway string `xml:"IPv6DefaultGateway,omitempty"`

	IPv6NameServers *ArrayOfString `xml:"IPv6NameServers,omitempty"`

	IPv6TimeServers *ArrayOfString `xml:"IPv6TimeServers,omitempty"`

	Secondaries *ArrayOfString `xml:"Secondaries,omitempty"`
}

type DnsZoneOptions struct {
	Internal bool `xml:"Internal,omitempty"`

	External bool `xml:"External,omitempty"`
}

type VMCreateOptions struct {
	VMParent string `xml:"VMParent,omitempty"`
}

type VMInterfaceOptions struct {
	IP string `xml:"IP,omitempty"`

	IPv6 string `xml:"IPv6,omitempty"`

	ServiceName string `xml:"ServiceName,omitempty"`

	InternetConnectivity string `xml:"InternetConnectivity,omitempty"`

	AddressType string `xml:"AddressType,omitempty"`

	BindHardwareAddress string `xml:"BindHardwareAddress,omitempty"`
}

type VMInfo struct {
	Name string `xml:"Name,omitempty"`

	IsVM bool `xml:"IsVM,omitempty"`

	VMParent string `xml:"VMParent,omitempty"`

	VMGuestList *ArrayOfString `xml:"VMGuestList,omitempty"`
}

type VMClusterInfo struct {
	ID int64 `xml:"ID,omitempty"`

	Name string `xml:"Name,omitempty"`

	Description string `xml:"Description,omitempty"`

	ResponsiblePerson *Person `xml:"ResponsiblePerson,omitempty"`

	Services *ArrayOfString `xml:"Services,omitempty"`
}

type IPMIOptions struct {
	UseDeviceName bool `xml:"UseDeviceName,omitempty"`
}

type VMClusterSearch struct {
	ClusterName string `xml:"ClusterName,omitempty"`

	Surname string `xml:"Surname,omitempty"`

	FirstName string `xml:"FirstName,omitempty"`
}

type BOOTPInfo struct {
	Server string `xml:"Server,omitempty"`

	ImagePath string `xml:"ImagePath,omitempty"`
}

type DNSDelegatedInput struct {
	Domain string `xml:"Domain,omitempty"`

	View string `xml:"View,omitempty"`

	KeyName string `xml:"KeyName,omitempty"`

	Description string `xml:"Description,omitempty"`

	UserDescription string `xml:"UserDescription,omitempty"`
}

type DNSDelegatedEntry struct {
	ID int64 `xml:"ID,omitempty"`

	Domain string `xml:"Domain,omitempty"`

	View string `xml:"View,omitempty"`

	KeyName string `xml:"KeyName,omitempty"`

	Description string `xml:"Description,omitempty"`

	UserDescription string `xml:"UserDescription,omitempty"`

	Aliases *ArrayOfString `xml:"Aliases,omitempty"`
}

type ArrayOfDNSDelegatedEntry struct {
}

type DNSDelegatedKey struct {
	ID int64 `xml:"ID,omitempty"`

	KeyName string `xml:"KeyName,omitempty"`

	Responsible *Person `xml:"Responsible,omitempty"`
}

type ArrayOfDNSDelegatedKey struct {
}

type Boolean bool

type NetworkServiceInterface interface {
	GetAuthToken(request *string) (*string, error)

	GetAuthTokenContext(ctx context.Context, request *string) (*string, error)

	SearchDevice(request *Auth) (*ArrayOfString, error)

	SearchDeviceContext(ctx context.Context, request *Auth) (*ArrayOfString, error)

	GetDeviceBasicInfo(request *string) (*DeviceBasicInfo, error)

	GetDeviceBasicInfoContext(ctx context.Context, request *string) (*DeviceBasicInfo, error)

	GetDeviceInfo(request *Auth) (*DeviceInfo, error)

	GetDeviceInfoContext(ctx context.Context, request *Auth) (*DeviceInfo, error)

	GetDeviceInfoArray(request *Auth) (*ArrayOfDeviceInfo, error)

	GetDeviceInfoArrayContext(ctx context.Context, request *Auth) (*ArrayOfDeviceInfo, error)

	GetDeviceInfoFromNameMAC(request *string) (*DeviceInfo, error)

	GetDeviceInfoFromNameMACContext(ctx context.Context, request *string) (*DeviceInfo, error)

	GetMyDeviceInfo() (*DeviceInfo, error)

	GetMyDeviceInfoContext(ctx context.Context) (*DeviceInfo, error)

	GetLastChangedDevices(request *Auth) (*ArrayOfString, error)

	GetLastChangedDevicesContext(ctx context.Context, request *Auth) (*ArrayOfString, error)

	BulkInsert(request *Auth) (*Boolean, error)

	BulkInsertContext(ctx context.Context, request *Auth) (*Boolean, error)

	BulkInsertAuto(request *DeviceInput) (*Boolean, error)

	BulkInsertAutoContext(ctx context.Context, request *DeviceInput) (*Boolean, error)

	BulkRemove(request *Auth) (*Boolean, error)

	BulkRemoveContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceInsert(request *Auth) (*Boolean, error)

	DeviceInsertContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceAddCard(request *Auth) (*Boolean, error)

	DeviceAddCardContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceAddBulkInterface(request *Auth) (*Boolean, error)

	DeviceAddBulkInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceRemove(request *Auth) (*Boolean, error)

	DeviceRemoveContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceRemoveCard(request *Auth) (*Boolean, error)

	DeviceRemoveCardContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceRemoveBulkInterface(request *Auth) (*Boolean, error)

	DeviceRemoveBulkInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceMoveBulkInterface(request *Auth) (*Boolean, error)

	DeviceMoveBulkInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceUpdate(request *Auth) (*Boolean, error)

	DeviceUpdateContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceGlobalRename(request *Auth) (*Boolean, error)

	DeviceGlobalRenameContext(ctx context.Context, request *Auth) (*Boolean, error)

	SetHCPResponse(request *Auth) (*Boolean, error)

	SetHCPResponseContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceUpdateIPv6Ready(request *Auth) (*Boolean, error)

	DeviceUpdateIPv6ReadyContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceUpdateManagerLock(request *Auth) (*Boolean, error)

	DeviceUpdateManagerLockContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceSetBOOTPInfo(request *Auth) (*Boolean, error)

	DeviceSetBOOTPInfoContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceRemoveBOOTPInfo(request *Auth) (*Boolean, error)

	DeviceRemoveBOOTPInfoContext(ctx context.Context, request *Auth) (*Boolean, error)

	GetBOOTPInfo(request *Auth) (*BOOTPInfo, error)

	GetBOOTPInfoContext(ctx context.Context, request *Auth) (*BOOTPInfo, error)

	GetBulkInterfaceInfo(request *Auth) (*BulkInterface, error)

	GetBulkInterfaceInfoContext(ctx context.Context, request *Auth) (*BulkInterface, error)

	SetInsertAddress(request *Auth) (*Boolean, error)

	SetInsertAddressContext(ctx context.Context, request *Auth) (*Boolean, error)

	SetInsertService(request *Auth) (*Boolean, error)

	SetInsertServiceContext(ctx context.Context, request *Auth) (*Boolean, error)

	SetDeleteAddress(request *Auth) (*Boolean, error)

	SetDeleteAddressContext(ctx context.Context, request *Auth) (*Boolean, error)

	SetDeleteService(request *Auth) (*Boolean, error)

	SetDeleteServiceContext(ctx context.Context, request *Auth) (*Boolean, error)

	GetSetInfo(request *Auth) (*SetInfo, error)

	GetSetInfoContext(ctx context.Context, request *Auth) (*SetInfo, error)

	GetSetNameFromID(request *Auth) (*string, error)

	GetSetNameFromIDContext(ctx context.Context, request *Auth) (*string, error)

	GetSetAllInterfaces(request *Auth) (*ArrayOfString, error)

	GetSetAllInterfacesContext(ctx context.Context, request *Auth) (*ArrayOfString, error)

	GetSetInterfacesTrusting(request *Auth) (*ArrayOfString, error)

	GetSetInterfacesTrustingContext(ctx context.Context, request *Auth) (*ArrayOfString, error)

	GetHCPInfoArray(request *Auth) (*ArrayOfInetInfo, error)

	GetHCPInfoArrayContext(ctx context.Context, request *Auth) (*ArrayOfInetInfo, error)

	GetDevicesFromService(request *Auth) (*ArrayOfString, error)

	GetDevicesFromServiceContext(ctx context.Context, request *Auth) (*ArrayOfString, error)

	GetSwitchesFromService(request *Auth) (*ArrayOfString, error)

	GetSwitchesFromServiceContext(ctx context.Context, request *Auth) (*ArrayOfString, error)

	GetSwitchInfo(request *Auth) (*ArrayOfSwitchPort, error)

	GetSwitchInfoContext(ctx context.Context, request *Auth) (*ArrayOfSwitchPort, error)

	GetConnectionsFromDevice(request *Auth) (*ArrayOfConnection, error)

	GetConnectionsFromDeviceContext(ctx context.Context, request *Auth) (*ArrayOfConnection, error)

	GetOutletLocationFromSwitchPort(request *Auth) (*OutletLocation, error)

	GetOutletLocationFromSwitchPortContext(ctx context.Context, request *Auth) (*OutletLocation, error)

	GetCurrentConnection(request *string) (*ArrayOfObservedSwitchConnection, error)

	GetCurrentConnectionContext(ctx context.Context, request *string) (*ArrayOfObservedSwitchConnection, error)

	GetMyCurrentConnection(request *ArrayOfString) (*ArrayOfObservedSwitchConnection, error)

	GetMyCurrentConnectionContext(ctx context.Context, request *ArrayOfString) (*ArrayOfObservedSwitchConnection, error)

	EnableFanOutFromSwitchPort(request *Auth) (*Boolean, error)

	EnableFanOutFromSwitchPortContext(ctx context.Context, request *Auth) (*Boolean, error)

	BindUnbindInterface(request *Auth) (*Boolean, error)

	BindUnbindInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error)

	InterfaceAddAlias(request *Auth) (*Boolean, error)

	InterfaceAddAliasContext(ctx context.Context, request *Auth) (*Boolean, error)

	InterfaceRemoveAlias(request *Auth) (*Boolean, error)

	InterfaceRemoveAliasContext(ctx context.Context, request *Auth) (*Boolean, error)

	InterfaceMoveAlias(request *Auth) (*Boolean, error)

	InterfaceMoveAliasContext(ctx context.Context, request *Auth) (*Boolean, error)

	InterfaceRename(request *Auth) (*Boolean, error)

	InterfaceRenameContext(ctx context.Context, request *Auth) (*Boolean, error)

	InterfaceMove(request *Auth) (*Boolean, error)

	InterfaceMoveContext(ctx context.Context, request *Auth) (*Boolean, error)

	SearchSet(request *Auth) (*ArrayOfString, error)

	SearchSetContext(ctx context.Context, request *Auth) (*ArrayOfString, error)

	SetInsert(request *Auth) (*Boolean, error)

	SetInsertContext(ctx context.Context, request *Auth) (*Boolean, error)

	SetRemove(request *Auth) (*Boolean, error)

	SetRemoveContext(ctx context.Context, request *Auth) (*Boolean, error)

	SetSwitchPortTypeStatus(request *Auth) (*Boolean, error)

	SetSwitchPortTypeStatusContext(ctx context.Context, request *Auth) (*Boolean, error)

	SetSwitchPortMedium(request *Auth) (*Boolean, error)

	SetSwitchPortMediumContext(ctx context.Context, request *Auth) (*Boolean, error)

	SetSwitchPortService(request *Auth) (*Boolean, error)

	SetSwitchPortServiceContext(ctx context.Context, request *Auth) (*Boolean, error)

	GetSwitchPortTypeStatus(request *Auth) (*SwitchPortTypeStatus, error)

	GetSwitchPortTypeStatusContext(ctx context.Context, request *Auth) (*SwitchPortTypeStatus, error)

	SearchNetNameTable(request *Auth) (*ArrayOfNetNameTuple, error)

	SearchNetNameTableContext(ctx context.Context, request *Auth) (*ArrayOfNetNameTuple, error)

	DeviceAddLogicalInterface(request *Auth) (*Boolean, error)

	DeviceAddLogicalInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error)

	DeviceRemoveLogicalInterface(request *Auth) (*Boolean, error)

	DeviceRemoveLogicalInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error)

	InterfaceUpdateDescription(request *Auth) (*Boolean, error)

	InterfaceUpdateDescriptionContext(ctx context.Context, request *Auth) (*Boolean, error)

	ServiceUpdateDescription(request *Auth) (*Boolean, error)

	ServiceUpdateDescriptionContext(ctx context.Context, request *Auth) (*Boolean, error)

	GetServiceInfo(request *Auth) (*ServiceInfo, error)

	GetServiceInfoContext(ctx context.Context, request *Auth) (*ServiceInfo, error)

	VmCreate(request *Auth) (*Boolean, error)

	VmCreateContext(ctx context.Context, request *Auth) (*Boolean, error)

	VmMigrate(request *Auth) (*Boolean, error)

	VmMigrateContext(ctx context.Context, request *Auth) (*Boolean, error)

	VmUpdate(request *Auth) (*Boolean, error)

	VmUpdateContext(ctx context.Context, request *Auth) (*Boolean, error)

	VmDestroy(request *Auth) (*Boolean, error)

	VmDestroyContext(ctx context.Context, request *Auth) (*Boolean, error)

	VmClusterGetInfo(request *Auth) (*VMClusterInfo, error)

	VmClusterGetInfoContext(ctx context.Context, request *Auth) (*VMClusterInfo, error)

	VmClusterGetDevices(request *Auth) (*ArrayOfString, error)

	VmClusterGetDevicesContext(ctx context.Context, request *Auth) (*ArrayOfString, error)

	VmGetInfo(request *Auth) (*VMInfo, error)

	VmGetInfoContext(ctx context.Context, request *Auth) (*VMInfo, error)

	VmGetClusterMembership(request *Auth) (*ArrayOfString, error)

	VmGetClusterMembershipContext(ctx context.Context, request *Auth) (*ArrayOfString, error)

	VmSearchCluster(request *Auth) (*ArrayOfString, error)

	VmSearchClusterContext(ctx context.Context, request *Auth) (*ArrayOfString, error)

	VmAddInterface(request *Auth) (*Boolean, error)

	VmAddInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error)

	VmRemoveInterface(request *Auth) (*Boolean, error)

	VmRemoveInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error)

	VmMoveInterface(request *Auth) (*Boolean, error)

	VmMoveInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error)

	VmAddCard(request *Auth) (*string, error)

	VmAddCardContext(ctx context.Context, request *Auth) (*string, error)

	VmRemoveCard(request *Auth) (*Boolean, error)

	VmRemoveCardContext(ctx context.Context, request *Auth) (*Boolean, error)

	DnsZoneUpdate(request *Auth) (*Boolean, error)

	DnsZoneUpdateContext(ctx context.Context, request *Auth) (*Boolean, error)

	DnsDelegatedSearch(request *Auth) (*ArrayOfDNSDelegatedEntry, error)

	DnsDelegatedSearchContext(ctx context.Context, request *Auth) (*ArrayOfDNSDelegatedEntry, error)

	DnsDelegatedGetByNameView(request *Auth) (*DNSDelegatedEntry, error)

	DnsDelegatedGetByNameViewContext(ctx context.Context, request *Auth) (*DNSDelegatedEntry, error)

	DnsDelegatedAdd(request *Auth) (*Boolean, error)

	DnsDelegatedAddContext(ctx context.Context, request *Auth) (*Boolean, error)

	DnsDelegatedListKeys(request *Auth) (*ArrayOfDNSDelegatedKey, error)

	DnsDelegatedListKeysContext(ctx context.Context, request *Auth) (*ArrayOfDNSDelegatedKey, error)

	DnsDelegatedRemove(request *Auth) (*Boolean, error)

	DnsDelegatedRemoveContext(ctx context.Context, request *Auth) (*Boolean, error)

	DnsDelegatedAliasAdd(request *Auth) (*Boolean, error)

	DnsDelegatedAliasAddContext(ctx context.Context, request *Auth) (*Boolean, error)

	DnsDelegatedAliasRemove(request *Auth) (*Boolean, error)

	DnsDelegatedAliasRemoveContext(ctx context.Context, request *Auth) (*Boolean, error)
}

type networkServiceInterface struct {
	client *soap.Client
}

func NewNetworkServiceInterface(client *soap.Client) NetworkServiceInterface {
	return &networkServiceInterface{
		client: client,
	}
}

func (service *networkServiceInterface) GetAuthTokenContext(ctx context.Context, request *string) (*string, error) {
	response := new(string)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetAuthToken(request *string) (*string, error) {
	return service.GetAuthTokenContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SearchDeviceContext(ctx context.Context, request *Auth) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SearchDevice(request *Auth) (*ArrayOfString, error) {
	return service.SearchDeviceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetDeviceBasicInfoContext(ctx context.Context, request *string) (*DeviceBasicInfo, error) {
	response := new(DeviceBasicInfo)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetDeviceBasicInfo(request *string) (*DeviceBasicInfo, error) {
	return service.GetDeviceBasicInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetDeviceInfoContext(ctx context.Context, request *Auth) (*DeviceInfo, error) {
	response := new(DeviceInfo)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetDeviceInfo(request *Auth) (*DeviceInfo, error) {
	return service.GetDeviceInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetDeviceInfoArrayContext(ctx context.Context, request *Auth) (*ArrayOfDeviceInfo, error) {
	response := new(ArrayOfDeviceInfo)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetDeviceInfoArray(request *Auth) (*ArrayOfDeviceInfo, error) {
	return service.GetDeviceInfoArrayContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetDeviceInfoFromNameMACContext(ctx context.Context, request *string) (*DeviceInfo, error) {
	response := new(DeviceInfo)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetDeviceInfoFromNameMAC(request *string) (*DeviceInfo, error) {
	return service.GetDeviceInfoFromNameMACContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetMyDeviceInfoContext(ctx context.Context) (*DeviceInfo, error) {
	response := new(DeviceInfo)
	err := service.client.CallContext(ctx, "''", nil, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetMyDeviceInfo() (*DeviceInfo, error) {
	return service.GetMyDeviceInfoContext(
		context.Background(),
	)
}

func (service *networkServiceInterface) GetLastChangedDevicesContext(ctx context.Context, request *Auth) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetLastChangedDevices(request *Auth) (*ArrayOfString, error) {
	return service.GetLastChangedDevicesContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) BulkInsertContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) BulkInsert(request *Auth) (*Boolean, error) {
	return service.BulkInsertContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) BulkInsertAutoContext(ctx context.Context, request *DeviceInput) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) BulkInsertAuto(request *DeviceInput) (*Boolean, error) {
	return service.BulkInsertAutoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) BulkRemoveContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) BulkRemove(request *Auth) (*Boolean, error) {
	return service.BulkRemoveContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceInsertContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceInsert(request *Auth) (*Boolean, error) {
	return service.DeviceInsertContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceAddCardContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceAddCard(request *Auth) (*Boolean, error) {
	return service.DeviceAddCardContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceAddBulkInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceAddBulkInterface(request *Auth) (*Boolean, error) {
	return service.DeviceAddBulkInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceRemoveContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceRemove(request *Auth) (*Boolean, error) {
	return service.DeviceRemoveContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceRemoveCardContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceRemoveCard(request *Auth) (*Boolean, error) {
	return service.DeviceRemoveCardContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceRemoveBulkInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceRemoveBulkInterface(request *Auth) (*Boolean, error) {
	return service.DeviceRemoveBulkInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceMoveBulkInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceMoveBulkInterface(request *Auth) (*Boolean, error) {
	return service.DeviceMoveBulkInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceUpdateContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceUpdate(request *Auth) (*Boolean, error) {
	return service.DeviceUpdateContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceGlobalRenameContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceGlobalRename(request *Auth) (*Boolean, error) {
	return service.DeviceGlobalRenameContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SetHCPResponseContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SetHCPResponse(request *Auth) (*Boolean, error) {
	return service.SetHCPResponseContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceUpdateIPv6ReadyContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceUpdateIPv6Ready(request *Auth) (*Boolean, error) {
	return service.DeviceUpdateIPv6ReadyContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceUpdateManagerLockContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceUpdateManagerLock(request *Auth) (*Boolean, error) {
	return service.DeviceUpdateManagerLockContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceSetBOOTPInfoContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceSetBOOTPInfo(request *Auth) (*Boolean, error) {
	return service.DeviceSetBOOTPInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceRemoveBOOTPInfoContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceRemoveBOOTPInfo(request *Auth) (*Boolean, error) {
	return service.DeviceRemoveBOOTPInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetBOOTPInfoContext(ctx context.Context, request *Auth) (*BOOTPInfo, error) {
	response := new(BOOTPInfo)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetBOOTPInfo(request *Auth) (*BOOTPInfo, error) {
	return service.GetBOOTPInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetBulkInterfaceInfoContext(ctx context.Context, request *Auth) (*BulkInterface, error) {
	response := new(BulkInterface)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetBulkInterfaceInfo(request *Auth) (*BulkInterface, error) {
	return service.GetBulkInterfaceInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SetInsertAddressContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SetInsertAddress(request *Auth) (*Boolean, error) {
	return service.SetInsertAddressContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SetInsertServiceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SetInsertService(request *Auth) (*Boolean, error) {
	return service.SetInsertServiceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SetDeleteAddressContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SetDeleteAddress(request *Auth) (*Boolean, error) {
	return service.SetDeleteAddressContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SetDeleteServiceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SetDeleteService(request *Auth) (*Boolean, error) {
	return service.SetDeleteServiceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetSetInfoContext(ctx context.Context, request *Auth) (*SetInfo, error) {
	response := new(SetInfo)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetSetInfo(request *Auth) (*SetInfo, error) {
	return service.GetSetInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetSetNameFromIDContext(ctx context.Context, request *Auth) (*string, error) {
	response := new(string)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetSetNameFromID(request *Auth) (*string, error) {
	return service.GetSetNameFromIDContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetSetAllInterfacesContext(ctx context.Context, request *Auth) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetSetAllInterfaces(request *Auth) (*ArrayOfString, error) {
	return service.GetSetAllInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetSetInterfacesTrustingContext(ctx context.Context, request *Auth) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetSetInterfacesTrusting(request *Auth) (*ArrayOfString, error) {
	return service.GetSetInterfacesTrustingContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetHCPInfoArrayContext(ctx context.Context, request *Auth) (*ArrayOfInetInfo, error) {
	response := new(ArrayOfInetInfo)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetHCPInfoArray(request *Auth) (*ArrayOfInetInfo, error) {
	return service.GetHCPInfoArrayContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetDevicesFromServiceContext(ctx context.Context, request *Auth) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetDevicesFromService(request *Auth) (*ArrayOfString, error) {
	return service.GetDevicesFromServiceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetSwitchesFromServiceContext(ctx context.Context, request *Auth) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetSwitchesFromService(request *Auth) (*ArrayOfString, error) {
	return service.GetSwitchesFromServiceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetSwitchInfoContext(ctx context.Context, request *Auth) (*ArrayOfSwitchPort, error) {
	response := new(ArrayOfSwitchPort)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetSwitchInfo(request *Auth) (*ArrayOfSwitchPort, error) {
	return service.GetSwitchInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetConnectionsFromDeviceContext(ctx context.Context, request *Auth) (*ArrayOfConnection, error) {
	response := new(ArrayOfConnection)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetConnectionsFromDevice(request *Auth) (*ArrayOfConnection, error) {
	return service.GetConnectionsFromDeviceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetOutletLocationFromSwitchPortContext(ctx context.Context, request *Auth) (*OutletLocation, error) {
	response := new(OutletLocation)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetOutletLocationFromSwitchPort(request *Auth) (*OutletLocation, error) {
	return service.GetOutletLocationFromSwitchPortContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetCurrentConnectionContext(ctx context.Context, request *string) (*ArrayOfObservedSwitchConnection, error) {
	response := new(ArrayOfObservedSwitchConnection)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetCurrentConnection(request *string) (*ArrayOfObservedSwitchConnection, error) {
	return service.GetCurrentConnectionContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetMyCurrentConnectionContext(ctx context.Context, request *ArrayOfString) (*ArrayOfObservedSwitchConnection, error) {
	response := new(ArrayOfObservedSwitchConnection)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetMyCurrentConnection(request *ArrayOfString) (*ArrayOfObservedSwitchConnection, error) {
	return service.GetMyCurrentConnectionContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) EnableFanOutFromSwitchPortContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) EnableFanOutFromSwitchPort(request *Auth) (*Boolean, error) {
	return service.EnableFanOutFromSwitchPortContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) BindUnbindInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) BindUnbindInterface(request *Auth) (*Boolean, error) {
	return service.BindUnbindInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) InterfaceAddAliasContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) InterfaceAddAlias(request *Auth) (*Boolean, error) {
	return service.InterfaceAddAliasContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) InterfaceRemoveAliasContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) InterfaceRemoveAlias(request *Auth) (*Boolean, error) {
	return service.InterfaceRemoveAliasContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) InterfaceMoveAliasContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) InterfaceMoveAlias(request *Auth) (*Boolean, error) {
	return service.InterfaceMoveAliasContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) InterfaceRenameContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) InterfaceRename(request *Auth) (*Boolean, error) {
	return service.InterfaceRenameContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) InterfaceMoveContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) InterfaceMove(request *Auth) (*Boolean, error) {
	return service.InterfaceMoveContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SearchSetContext(ctx context.Context, request *Auth) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SearchSet(request *Auth) (*ArrayOfString, error) {
	return service.SearchSetContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SetInsertContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SetInsert(request *Auth) (*Boolean, error) {
	return service.SetInsertContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SetRemoveContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SetRemove(request *Auth) (*Boolean, error) {
	return service.SetRemoveContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SetSwitchPortTypeStatusContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SetSwitchPortTypeStatus(request *Auth) (*Boolean, error) {
	return service.SetSwitchPortTypeStatusContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SetSwitchPortMediumContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SetSwitchPortMedium(request *Auth) (*Boolean, error) {
	return service.SetSwitchPortMediumContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SetSwitchPortServiceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SetSwitchPortService(request *Auth) (*Boolean, error) {
	return service.SetSwitchPortServiceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetSwitchPortTypeStatusContext(ctx context.Context, request *Auth) (*SwitchPortTypeStatus, error) {
	response := new(SwitchPortTypeStatus)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetSwitchPortTypeStatus(request *Auth) (*SwitchPortTypeStatus, error) {
	return service.GetSwitchPortTypeStatusContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) SearchNetNameTableContext(ctx context.Context, request *Auth) (*ArrayOfNetNameTuple, error) {
	response := new(ArrayOfNetNameTuple)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) SearchNetNameTable(request *Auth) (*ArrayOfNetNameTuple, error) {
	return service.SearchNetNameTableContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceAddLogicalInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceAddLogicalInterface(request *Auth) (*Boolean, error) {
	return service.DeviceAddLogicalInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DeviceRemoveLogicalInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DeviceRemoveLogicalInterface(request *Auth) (*Boolean, error) {
	return service.DeviceRemoveLogicalInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) InterfaceUpdateDescriptionContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) InterfaceUpdateDescription(request *Auth) (*Boolean, error) {
	return service.InterfaceUpdateDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) ServiceUpdateDescriptionContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) ServiceUpdateDescription(request *Auth) (*Boolean, error) {
	return service.ServiceUpdateDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetServiceInfoContext(ctx context.Context, request *Auth) (*ServiceInfo, error) {
	response := new(ServiceInfo)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetServiceInfo(request *Auth) (*ServiceInfo, error) {
	return service.GetServiceInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmCreateContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmCreate(request *Auth) (*Boolean, error) {
	return service.VmCreateContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmMigrateContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmMigrate(request *Auth) (*Boolean, error) {
	return service.VmMigrateContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmUpdateContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmUpdate(request *Auth) (*Boolean, error) {
	return service.VmUpdateContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmDestroyContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmDestroy(request *Auth) (*Boolean, error) {
	return service.VmDestroyContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmClusterGetInfoContext(ctx context.Context, request *Auth) (*VMClusterInfo, error) {
	response := new(VMClusterInfo)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmClusterGetInfo(request *Auth) (*VMClusterInfo, error) {
	return service.VmClusterGetInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmClusterGetDevicesContext(ctx context.Context, request *Auth) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmClusterGetDevices(request *Auth) (*ArrayOfString, error) {
	return service.VmClusterGetDevicesContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmGetInfoContext(ctx context.Context, request *Auth) (*VMInfo, error) {
	response := new(VMInfo)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmGetInfo(request *Auth) (*VMInfo, error) {
	return service.VmGetInfoContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmGetClusterMembershipContext(ctx context.Context, request *Auth) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmGetClusterMembership(request *Auth) (*ArrayOfString, error) {
	return service.VmGetClusterMembershipContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmSearchClusterContext(ctx context.Context, request *Auth) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmSearchCluster(request *Auth) (*ArrayOfString, error) {
	return service.VmSearchClusterContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmAddInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmAddInterface(request *Auth) (*Boolean, error) {
	return service.VmAddInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmRemoveInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmRemoveInterface(request *Auth) (*Boolean, error) {
	return service.VmRemoveInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmMoveInterfaceContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmMoveInterface(request *Auth) (*Boolean, error) {
	return service.VmMoveInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmAddCardContext(ctx context.Context, request *Auth) (*string, error) {
	response := new(string)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmAddCard(request *Auth) (*string, error) {
	return service.VmAddCardContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) VmRemoveCardContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) VmRemoveCard(request *Auth) (*Boolean, error) {
	return service.VmRemoveCardContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DnsZoneUpdateContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DnsZoneUpdate(request *Auth) (*Boolean, error) {
	return service.DnsZoneUpdateContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DnsDelegatedSearchContext(ctx context.Context, request *Auth) (*ArrayOfDNSDelegatedEntry, error) {
	response := new(ArrayOfDNSDelegatedEntry)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DnsDelegatedSearch(request *Auth) (*ArrayOfDNSDelegatedEntry, error) {
	return service.DnsDelegatedSearchContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DnsDelegatedGetByNameViewContext(ctx context.Context, request *Auth) (*DNSDelegatedEntry, error) {
	response := new(DNSDelegatedEntry)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DnsDelegatedGetByNameView(request *Auth) (*DNSDelegatedEntry, error) {
	return service.DnsDelegatedGetByNameViewContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DnsDelegatedAddContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DnsDelegatedAdd(request *Auth) (*Boolean, error) {
	return service.DnsDelegatedAddContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DnsDelegatedListKeysContext(ctx context.Context, request *Auth) (*ArrayOfDNSDelegatedKey, error) {
	response := new(ArrayOfDNSDelegatedKey)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DnsDelegatedListKeys(request *Auth) (*ArrayOfDNSDelegatedKey, error) {
	return service.DnsDelegatedListKeysContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DnsDelegatedRemoveContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DnsDelegatedRemove(request *Auth) (*Boolean, error) {
	return service.DnsDelegatedRemoveContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DnsDelegatedAliasAddContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DnsDelegatedAliasAdd(request *Auth) (*Boolean, error) {
	return service.DnsDelegatedAliasAddContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) DnsDelegatedAliasRemoveContext(ctx context.Context, request *Auth) (*Boolean, error) {
	response := new(Boolean)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) DnsDelegatedAliasRemove(request *Auth) (*Boolean, error) {
	return service.DnsDelegatedAliasRemoveContext(
		context.Background(),
		request,
	)
}
